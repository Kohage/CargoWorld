@model Core.Models.Cargo
@{
    ViewBag.Title = "Create";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Highway Single Post</title>
    <!--

    Highway Template

    https://templatemo.com/tm-520-highway

    -->
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="apple-touch-icon" href="apple-touch-icon.png">

    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/css/fontAwesome.css">
    <link rel="stylesheet" href="/css/light-box.css">
    <link rel="stylesheet" href="/css/templatemo-style.css">

    <link href="https://fonts.googleapis.com/css?family=Kanit:60,200,300,400,500,600,700,800,900" rel="stylesheet">

    <script src="/js/vendor/modernizr-2.8.3-respond-1.4.2.min.js"></script>
</head>

<body style="">

    <nav>
        <div class="logo">
            <a href="index.html">Gala<em>xy</em></a>
        </div>
        <div class="menu-icon">
            <span></span>
        </div>
    </nav>

<div class="page-heading">
	<div class="container">
		<div class="heading-content">
			<h1>Your Cargoes</h1>
		</div>
	</div>
</div>
	<div class="blog-entries" style="height: 650px;">
		@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
		{
			@Html.AntiForgeryToken()
			<div class="form-horizontal">
				<div class="form-group">
					@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-6">
						@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
					</div>
				</div>
				
				<div class="form-group">
					@Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-6">
						@Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
					</div>
				</div>
				
				<div class="form-group">
					@Html.LabelFor(model => model.Volume, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-6">
						@Html.EditorFor(model => model.Volume, new { htmlAttributes = new { @class = "form-control" } })
						@Html.ValidationMessageFor(model => model.Volume, "", new { @class = "text-danger" })
					</div>
				</div>
				
				<div class="form-group">
					@Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-6">
						<div class="editor-field">
							<input type="file" name="Image" />
						</div>
					</div>
				</div>
				
				<div class="form-group">
					@Html.LabelFor(model => model.Client_Id, "cargo", htmlAttributes: new { @class = "control-label col-md-2" })
					<div class="col-md-6">
						@Html.DropDownList("Client_Id", ViewData["Id"] as IEnumerable<SelectListItem>, htmlAttributes: new { @class = "form-control" })
						@Html.ValidationMessageFor(model => model.Client_Id, "", new { @class = "text-danger" })
					</div>
				</div>

				<div class="form-group">
					<div class="col-md-offset-2 col-md-6">
						<input id="Image" type="submit" value="Create" class="btn btn-default" />
					</div>
				</div>

				<div class="form-group">
					<div class="col-md-offset-2 col-md-6">
						@Html.ActionLink("Back to List", "Index")
					</div>
				</div>
				</div>
		}

</div>
<footer>
	    @await Html.PartialAsync("_Footer")
    </footer>

	<section class="overlay-menu">
	    @await Html.PartialAsync("_Menu")
    </section>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="/js/vendor/jquery-1.11.2.min.js"><\/script>')</script>

    <script src="/js/vendor/bootstrap.min.js"></script>

    <script src="/js/plugins.js"></script>
<script src="/js/main.js"></script>
<script>
		const imageElement = document.getElementById("Image");

		// Преобразуем изображение в dataURL
		const dataURL = imageElement.toDataURL();

		// Сохраним dataURL локально
		saveAs(dataURL, "my-image.jpg");
</script>

</body>
</html>
